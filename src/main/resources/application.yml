server:
  max-http-header-size: 16384
  tomcat:
    accept-count: 400
  servlet:
    context-path: /paulo
spring:
  profiles:
    active: @activatedProperties@
  servlet:
    multipart:
      max-file-size: 60MB
      max-request-size: 60MB
  resources:
    static-locations: classpath:static/,file:static/
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: org.postgresql.Driver
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 1800000
      maxEvictableIdleTimeMillis: 3600000
      # validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      # filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat: true
      # connection-init-sqls: ["SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"]
  redis:
    lettuce:
      pool:
        # 最大活跃链接数 默认8
        max-active: 8
        # 最大空闲连接数 默认8
        max-idle: 8
        # 最小空闲连接数 默认0
        min-idle: 0
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
    # 连接超时时间（毫秒）
    timeout: 5000ms
  mvc:
    async:
      request-timeout: 300000ms

mybatis:
  config-location: classpath:mybatis-config.xml
  mapper-locations: classpath:mybatis/mapper/**/*.xml
  type-aliases-package: com.china.paulo.entity

# 通用 Mapper 配置
mapper:
  mappers: com.china.paulo.util.BaseMapper
  not-empty: false
  identity: postgresql


# 配置pageHelper
pagehelper:
  helperDialect: postgresql
  reasonable: false
  #自动分页的配置，依据的是入参，如果参数中有pageNum，pageSize分页参数，则会自动分页
  #supportMethodsArguments: true
  #业务参数的值赋予给pageHelper
  #params: pageNum=page;pageSize=pageSize;count=countSql;

# 如果不想灵活配置log 直接这样写
#logging:
 # level:
  #  com.china.pailo.mapper: debug